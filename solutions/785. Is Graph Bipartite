class Solution {
public:
    bool bfs(vector<vector<int>>& graph,int color[],int u){
        
        color[u] = 0;
        queue<int> q;
        q.push(u);
        
        while(q.size()){
            
            int u = q.front(); q.pop();
            for(int v : graph[u]){
                if(color[v] == -1){
                    color[v] = 1-color[u];
                    q.push(v);
                }
                else if(color[v] == color[u])
                    return false;
            }
        }
        return true;
    }
    
    
    bool isBipartite(vector<vector<int>>& graph) {
        
        int N = graph.size();
        int color[N];
        for(int i =0;i<N;i++)
              color[i] =-1;
        
        for(int i =0;i<N;i++){
            if(color[i] == -1){
                if(!bfs(graph,color,i))
                    return false;
            }
        }
        return true;
    }
};
